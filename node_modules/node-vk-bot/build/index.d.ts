/// <reference types="node" />
import { EventEmitter } from 'events';
import { VKError, VKExecuteResponse, VKResponse } from './interfaces/APIResponses';
import { UploadedPhoto } from './interfaces/UploadedPhoto';
import { Message } from './interfaces/Message';
import { UserEvent } from './interfaces/UserEvent';
import { MessageSendParams } from './interfaces/MessageSendParams';
export interface Options {
    token: string;
    prefix?: RegExp;
    prefixOnlyInChats?: boolean;
    chats?: number[];
    api?: {
        lang?: string;
        v?: number;
    };
}
export declare class Bot extends EventEmitter {
    options: Options;
    _events: Object;
    _userEvents: UserEvent[];
    _stop: boolean;
    constructor(options: Options);
    api(method: string, params?: any): Promise<VKResponse | VKExecuteResponse>;
    send(text: string, peer: number, params?: MessageSendParams): Promise<VKResponse>;
    start(poll_delay?: number): this;
    stop(): this;
    get(pattern: RegExp, listener: (msg?: Message, exec?: RegExpExecArray) => any): this;
    uploadPhoto(path: string): Promise<UploadedPhoto>;
    private _update(update);
}
export { Message, UploadedPhoto, VKError, VKExecuteResponse, VKResponse, UserEvent, MessageSendParams };
